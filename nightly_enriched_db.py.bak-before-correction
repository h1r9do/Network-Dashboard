#!/usr/bin/env python3
"""
Enhanced Database-Integrated Nightly Enriched Script with ARIN Integration
Enriches circuit data with Meraki IP addresses and ARIN provider information
"""

import os
import sys
import logging
import psycopg2
from psycopg2.extras import execute_values
from datetime import datetime, timezone
import pandas as pd
import re
from fuzzywuzzy import fuzz

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from config import Config

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/nightly-enriched-db.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def get_db_connection():
    """Get database connection using config"""
    import re
    match = re.match(r'postgresql://(.+):(.+)@(.+):(\d+)/(.+)', Config.SQLALCHEMY_DATABASE_URI)
    if not match:
        raise ValueError("Invalid database URI")
    
    user, password, host, port, database = match.groups()
    
    return psycopg2.connect(
        host=host,
        port=int(port),
        database=database,
        user=user,
        password=password
    )

def load_tracking_data():
    """Load latest tracking CSV data"""
    tracking_dir = "/var/www/html/circuitinfo"
    import glob
    
    # Find latest tracking CSV
    csv_files = glob.glob(f"{tracking_dir}/tracking_data_*.csv")
    if not csv_files:
        logger.error("No tracking CSV files found")
        return None
    
    latest_file = max(csv_files)
    logger.info(f"Loading tracking data from {latest_file}")
    
    try:
        df = pd.read_csv(latest_file, low_memory=False)
        logger.info(f"Loaded {len(df)} tracking records")
        return df
    except Exception as e:
        logger.error(f"Error loading tracking data: {e}")
        return None

def normalize_provider(provider_label):
    """Normalize provider names using comprehensive mapping"""
    
    if not provider_label or pd.isna(provider_label):
        return "Unknown"
    
    # Provider normalization map
    provider_mapping = {
        "spectrum": "Charter Communications",
        "charter": "Charter Communications",
        "cox business": "Cox Communications",
        "cox": "Cox Communications", 
        "comcast workplace": "Comcast",
        "comcast": "Comcast",
        "at&t": "AT&T",
        "att": "AT&T",
        "verizon": "Verizon",
        "vz": "Verizon",
        "centurylink": "CenturyLink",
        "clink": "CenturyLink",
        "lumen": "CenturyLink",
        "frontier": "Frontier",
        "starlink": "Starlink",
        "ritter": "Ritter Communications",
        "conway": "Conway Corporation",
        "altice": "Optimum",
        "optimum": "Optimum",
        "brightspeed": "Brightspeed",
        "consolidated": "Consolidated Communications"
    }
    
    provider_lower = str(provider_label).lower().strip()
    
    # Direct mapping
    for key, canonical in provider_mapping.items():
        if key in provider_lower:
            return canonical
    
    return provider_label.strip()

def parse_speed_format(speed_str):
    """Parse speed string and return normalized format"""
    if not speed_str or pd.isna(speed_str):
        return ""
    
    speed_str = str(speed_str).strip()
    
    # Handle "Cell" or "Satellite" as special cases
    if speed_str.lower() in ['cell', 'satellite']:
        return speed_str
    
    # Try to parse standard speed format (e.g., "100M x 100M", "1G x 1G")
    speed_pattern = re.compile(r'(\d+(?:\.\d+)?)\s*([MG]B?)\s*x\s*(\d+(?:\.\d+)?)\s*([MG]B?)', re.IGNORECASE)
    match = speed_pattern.search(speed_str)
    
    if match:
        down_speed = float(match.group(1))
        down_unit = match.group(2).upper()
        up_speed = float(match.group(3))
        up_unit = match.group(4).upper()
        
        # Convert to Mbps
        if down_unit in ['G', 'GB']:
            down_speed *= 1000
        if up_unit in ['G', 'GB']:
            up_speed *= 1000
            
        return f"{down_speed:.1f}M x {up_speed:.1f}M"
    
    return speed_str

def enrich_circuits_with_meraki(conn):
    """Enrich circuit data with Meraki IP addresses and ARIN information"""
    
    cursor = conn.cursor()
    
    # Load tracking data
    tracking_df = load_tracking_data()
    if tracking_df is None:
        logger.error("Cannot proceed without tracking data")
        return False
    
    try:
        # Get Meraki inventory with IP data
        cursor.execute("""
            SELECT 
                network_name, device_serial, device_model, device_tags,
                wan1_ip, wan1_arin_provider, wan2_ip, wan2_arin_provider
            FROM meraki_inventory 
            WHERE device_model LIKE 'MX%'
            ORDER BY network_name
        """)
        
        meraki_devices = cursor.fetchall()
        logger.info(f"Processing {len(meraki_devices)} MX devices for enrichment")
        
        enriched_count = 0
        
        for device in meraki_devices:
            (network_name, device_serial, device_model, device_tags,
             wan1_ip, wan1_arin_provider, wan2_ip, wan2_arin_provider) = device
            
            # Skip excluded tags
            if device_tags and any(tag.lower() in ['hub', 'lab', 'voice'] for tag in device_tags):
                continue
            
            # Try to match with tracking data by site name
            site_matches = tracking_df[tracking_df['Site Name'].str.contains(network_name, case=False, na=False)]
            
            if len(site_matches) == 0:
                logger.debug(f"No tracking match found for {network_name}")
                continue
            
            # Process each circuit match (Primary and Secondary)
            for idx, tracking_match in site_matches.iterrows():
                circuit_purpose = str(tracking_match.get('Circuit Purpose', ''))
                
                # Determine which WAN to use based on circuit purpose
                if 'primary' in circuit_purpose.lower():
                    wan_num = 'wan1'
                    ip = wan1_ip
                    arin_provider = wan1_arin_provider
                elif 'secondary' in circuit_purpose.lower():
                    wan_num = 'wan2'
                    ip = wan2_ip
                    arin_provider = wan2_arin_provider
                else:
                    # Default to WAN1 if purpose unclear
                    wan_num = 'wan1'
                    ip = wan1_ip
                    arin_provider = wan1_arin_provider
                
                # Build enriched data
                provider_name = normalize_provider(tracking_match.get('provider_name', ''))
                speed = parse_speed_format(tracking_match.get('details_ordered_service_speed', ''))
                monthly_cost = float(tracking_match.get('billing_monthly_cost', 0)) if not pd.isna(tracking_match.get('billing_monthly_cost')) else 0.0
                
                # Format monthly cost
                if monthly_cost > 0:
                    monthly_cost_str = f"${monthly_cost:.2f}"
                else:
                    monthly_cost_str = "$0.00"
                
                # Determine circuit role
                circuit_role = 'Primary' if 'primary' in circuit_purpose.lower() else 'Secondary'
                
                # Check if this network already exists in enriched_circuits
                cursor.execute("""
                    SELECT id FROM enriched_circuits WHERE network_name = %s
                """, (network_name,))
                
                existing = cursor.fetchone()
                
                if existing:
                    # Update existing record
                    update_fields = {
                        f'{wan_num}_provider': provider_name,
                        f'{wan_num}_speed': speed,
                        f'{wan_num}_monthly_cost': monthly_cost_str,
                        f'{wan_num}_circuit_role': circuit_role,
                        f'{wan_num}_ip': ip or '',
                        f'{wan_num}_arin_org': arin_provider or ''
                    }
                    
                    update_sql = f"""
                        UPDATE enriched_circuits SET
                            {wan_num}_provider = %s,
                            {wan_num}_speed = %s,
                            {wan_num}_monthly_cost = %s,
                            {wan_num}_circuit_role = %s,
                            {wan_num}_ip = %s,
                            {wan_num}_arin_org = %s,
                            last_updated = %s
                        WHERE network_name = %s
                    """
                    
                    cursor.execute(update_sql, (
                        provider_name,
                        speed,
                        monthly_cost_str,
                        circuit_role,
                        ip or '',
                        arin_provider or '',
                        datetime.now(timezone.utc),
                        network_name
                    ))
                else:
                    # Insert new record
                    insert_sql = """
                        INSERT INTO enriched_circuits (
                            network_name, device_tags,
                            wan1_provider, wan1_speed, wan1_monthly_cost, wan1_circuit_role, wan1_ip, wan1_arin_org,
                            wan2_provider, wan2_speed, wan2_monthly_cost, wan2_circuit_role, wan2_ip, wan2_arin_org,
                            last_updated, created_at
                        ) VALUES (
                            %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                        )
                    """
                    
                    # Initialize all fields
                    values = [network_name, device_tags or []]
                    
                    # Set values for the appropriate WAN
                    if wan_num == 'wan1':
                        values.extend([
                            provider_name, speed, monthly_cost_str, circuit_role, ip or '', arin_provider or '',
                            '', '', '$0.00', 'Secondary', '', ''
                        ])
                    else:
                        values.extend([
                            '', '', '$0.00', 'Primary', '', '',
                            provider_name, speed, monthly_cost_str, circuit_role, ip or '', arin_provider or ''
                        ])
                    
                    values.extend([datetime.now(timezone.utc), datetime.now(timezone.utc)])
                    
                    cursor.execute(insert_sql, values)
                
                enriched_count += 1
        
        conn.commit()
        logger.info(f"Successfully enriched {enriched_count} circuits in database")
        return True
        
    except Exception as e:
        logger.error(f"Error during enrichment: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()

def main():
    """Main processing function"""
    logger.info("Starting enhanced database-integrated nightly enrichment with ARIN data")
    
    try:
        # Get database connection
        conn = get_db_connection()
        
        # Perform enrichment
        success = enrich_circuits_with_meraki(conn)
        
        if success:
            logger.info("Nightly enrichment completed successfully")
        else:
            logger.error("Nightly enrichment failed")
            return False
            
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"Error in main process: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)