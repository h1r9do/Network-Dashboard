#!/usr/bin/env python3
"""
Database-Integrated Nightly Inventory Script
Replaces file-based nightly_inventory_summary.py with direct database operations
Eliminates need for large inventory JSON files by storing data directly in database
"""

import os
import sys
import logging
import psycopg2
from psycopg2.extras import execute_values
from datetime import datetime, timezone
import requests
import json
import re
from dotenv import load_dotenv

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from config import Config

# Load environment variables
load_dotenv('/usr/local/bin/meraki.env')

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/nightly-inventory-db.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration
MERAKI_API_KEY = os.getenv("MERAKI_API_KEY")
BASE_URL = "https://api.meraki.com/api/v1"

def get_db_connection():
    """Get database connection using config"""
    import re
    match = re.match(r'postgresql://(.+):(.+)@(.+):(\d+)/(.+)', Config.SQLALCHEMY_DATABASE_URI)
    if not match:
        raise ValueError("Invalid database URI")
    
    user, password, host, port, database = match.groups()
    
    return psycopg2.connect(
        host=host,
        port=int(port),
        database=database,
        user=user,
        password=password
    )

def make_api_request(url, max_retries=3):
    """Make API request with retry logic"""
    headers = {"X-Cisco-Meraki-API-Key": MERAKI_API_KEY}
    
    for attempt in range(max_retries):
        try:
            response = requests.get(url, headers=headers, timeout=30)
            if response.status_code == 429:  # Rate limited
                import time
                time.sleep(2 ** attempt)
                continue
            response.raise_for_status()
            return response.json()
        except Exception as e:
            if attempt == max_retries - 1:
                logger.error(f"Failed to fetch {url} after {max_retries} attempts: {e}")
                return []
            import time
            time.sleep(2 ** attempt)
    return []

def fetch_eol_data():
    """Fetch End-of-Life data from Meraki documentation"""
    try:
        # This would need to be updated with actual EOL data source
        # For now, return basic EOL info for common models
        eol_data = {
            'MX64': {'eol_announced': '2021-07-01', 'end_of_sale': '2022-01-31', 'end_of_support': '2027-01-31'},
            'MX65': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
            'MX67': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
            'MX68': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
            'MX75': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
            'MX84': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
            'MX95': {'eol_announced': None, 'end_of_sale': None, 'end_of_support': None},
        }
        return eol_data
    except Exception as e:
        logger.warning(f"Could not fetch EOL data: {e}")
        return {}

def process_inventory_data(conn):
    """Process inventory data and store in database"""
    cursor = conn.cursor()
    
    try:
        # Get organizations
        orgs = make_api_request(f"{BASE_URL}/organizations")
        logger.info(f"Found {len(orgs)} organizations")
        
        # Get EOL data
        eol_data = fetch_eol_data()
        
        total_devices = 0
        
        for org in orgs:
            org_id = org.get('id')
            org_name = org.get('name', 'Unknown')
            
            logger.info(f"Processing organization: {org_name}")
            
            # Get organization inventory
            inventory = make_api_request(f"{BASE_URL}/organizations/{org_id}/inventory")
            
            if not inventory:
                logger.warning(f"No inventory data for {org_name}")
                continue
            
            # Process each device
            for device in inventory:
                model = device.get('model', 'Unknown')
                serial = device.get('serial', '')
                network_id = device.get('networkId', '')
                
                # Get EOL information
                eol_info = eol_data.get(model, {})
                
                # Insert/update device inventory
                upsert_sql = """
                    INSERT INTO device_inventory (
                        organization_name, device_serial, model, network_id,
                        eol_announced, end_of_sale, end_of_support,
                        last_seen, created_at
                    ) VALUES (
                        %s, %s, %s, %s, %s, %s, %s, %s, %s
                    )
                    ON CONFLICT (device_serial) DO UPDATE SET
                        organization_name = EXCLUDED.organization_name,
                        model = EXCLUDED.model,
                        network_id = EXCLUDED.network_id,
                        eol_announced = EXCLUDED.eol_announced,
                        end_of_sale = EXCLUDED.end_of_sale,
                        end_of_support = EXCLUDED.end_of_support,
                        last_seen = EXCLUDED.last_seen
                """
                
                cursor.execute(upsert_sql, (
                    org_name,
                    serial,
                    model,
                    network_id,
                    eol_info.get('eol_announced'),
                    eol_info.get('end_of_sale'),
                    eol_info.get('end_of_support'),
                    datetime.now(timezone.utc),
                    datetime.now(timezone.utc)
                ))
                
                total_devices += 1
        
        # Create inventory summary after devices are inserted
        # For now, skip inventory summary creation due to schema differences
        # This will need to be addressed when updating the existing inventory system
        logger.info("Skipping inventory summary creation - schema differences with existing table")
        
        conn.commit()
        logger.info(f"Successfully processed {total_devices} devices into database")
        return True
        
    except Exception as e:
        logger.error(f"Error processing inventory: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()

def create_inventory_tables(conn):
    """Create inventory tables if they don't exist"""
    cursor = conn.cursor()
    
    try:
        # Device inventory table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS device_inventory (
                id SERIAL PRIMARY KEY,
                organization_name VARCHAR(200),
                device_serial VARCHAR(50) UNIQUE NOT NULL,
                model VARCHAR(50),
                network_id VARCHAR(100),
                eol_announced DATE,
                end_of_sale DATE,
                end_of_support DATE,
                last_seen TIMESTAMP,
                created_at TIMESTAMP DEFAULT NOW()
            )
        """)
        
        # Inventory summary table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS inventory_summary (
                id SERIAL PRIMARY KEY,
                summary_date DATE,
                model VARCHAR(50),
                organization_name VARCHAR(200),
                device_count INTEGER,
                eol_announced DATE,
                end_of_sale DATE,
                end_of_support DATE,
                created_at TIMESTAMP DEFAULT NOW(),
                UNIQUE(summary_date, model, organization_name)
            )
        """)
        
        # Create indexes separately to avoid issues
        index_queries = [
            "CREATE INDEX IF NOT EXISTS idx_device_inventory_model ON device_inventory(model)",
            "CREATE INDEX IF NOT EXISTS idx_device_inventory_org ON device_inventory(organization_name)",
            "CREATE INDEX IF NOT EXISTS idx_device_inventory_eol ON device_inventory(end_of_sale)",
            "CREATE INDEX IF NOT EXISTS idx_inventory_summary_date ON inventory_summary(summary_date)"
        ]
        
        for query in index_queries:
            try:
                cursor.execute(query)
            except Exception as e:
                logger.warning(f"Index creation warning: {e}")
        
        conn.commit()
        logger.info("Inventory tables created/verified")
        
    except Exception as e:
        logger.error(f"Error creating inventory tables: {e}")
        conn.rollback()
        raise
    finally:
        cursor.close()

def main():
    """Main processing function"""
    logger.info("Starting database-integrated nightly inventory process")
    
    try:
        # Get database connection
        conn = get_db_connection()
        
        # Create tables if needed
        create_inventory_tables(conn)
        
        # Process inventory data
        success = process_inventory_data(conn)
        
        if success:
            logger.info("Nightly inventory processing completed successfully")
        else:
            logger.error("Nightly inventory processing failed")
            return False
            
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"Error in main process: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)